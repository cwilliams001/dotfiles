---
- name: Setup Development Tools from Source
  hosts: all
  become: yes

  vars:
    tmux_version: "3.5a"
    fd_version: "v10.2.0"
    fzf_version: "0.48.0"
    neovim_version: "v0.10.0"
    zoxide_version: "0.9.8"
    ghostty_version: "1.1.3"
    ghostty_release_tag: "1.1.3-0-ppa2" # The specific release tag from GitHub
    dotfiles_dir: "/home/ansible/dotfiles"
    bin_dir: "/usr/local/bin"

    # URLs for pre-compiled binaries
    fd_url: "https://github.com/sharkdp/fd/releases/download/{{ fd_version }}/fd-{{ fd_version }}-x86_64-unknown-linux-gnu.tar.gz"
    fzf_url: "https://github.com/junegunn/fzf/releases/download/{{ fzf_version }}/fzf-{{ fzf_version }}-linux_amd64.tar.gz"
    neovim_url: "https://github.com/neovim/neovim/releases/download/{{ neovim_version }}/nvim-linux64.tar.gz"
    ghostty_deb_url: "https://github.com/mkasberg/ghostty-ubuntu/releases/download/{{ ghostty_release_tag }}/ghostty_{{ ghostty_release_tag }}_amd64_22.04.deb"
    zoxide_deb_url: "https://github.com/ajeetdsouza/zoxide/releases/download/v{{ zoxide_version }}/zoxide_{{ zoxide_version }}-1_amd64.deb"

  tasks:
    - name: Fix any broken apt packages
      command: apt --fix-broken install -y

    - name: Ensure required packages are installed
      apt:
        name:
          - build-essential # For tmux
          - curl
          - git
          - unzip
          - pkg-config
          - libncurses-dev
          - libevent-dev
          - libssl-dev
          - python3-pip
          - zsh
          # GUI dependencies for ghostty
          - xvfb
          - x11-apps
          - libgtk-3-0
          - libgtk-4-1
          - libadwaita-1-0
        state: present
        update_cache: yes
      ignore_errors: yes # Ignore if GUI packages fail on headless

    - name: Install Ghostty from .deb
      block:
        - name: Download Ghostty .deb package
          get_url:
            url: "{{ ghostty_deb_url }}"
            dest: "/tmp/ghostty.deb"
        - name: Install Ghostty .deb package
          apt:
            deb: "/tmp/ghostty.deb"
        - name: Clean up Ghostty .deb package
          file:
            path: "/tmp/ghostty.deb"
            state: absent
      when: "ansible_os_family == 'Debian'"
      ignore_errors: yes # Best effort for headless systems

    - name: Build and install tmux from source
      block:
        - name: Download tmux source
          get_url:
            url: "https://github.com/tmux/tmux/releases/download/{{ tmux_version }}/tmux-{{ tmux_version }}.tar.gz"
            dest: "/tmp/tmux-{{ tmux_version }}.tar.gz"
        - name: Unarchive tmux source
          unarchive:
            src: "/tmp/tmux-{{ tmux_version }}.tar.gz"
            dest: "/tmp"
            remote_src: yes
            creates: "/tmp/tmux-{{ tmux_version }}"
        - name: Build and install tmux
          shell: |
            cd /tmp/tmux-{{ tmux_version }}
            ./configure --prefix={{ bin_dir }}
            make -j$(nproc)
            make install
          args:
            creates: "{{ bin_dir }}/tmux"
        - name: Clean up tmux source
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/tmux-{{ tmux_version }}"
            - "/tmp/tmux-{{ tmux_version }}.tar.gz"

    - name: Install fd
      block:
        - name: Download and unarchive fd
          unarchive:
            src: "{{ fd_url }}"
            dest: "/tmp"
            remote_src: yes
            creates: "/tmp/fd-{{ fd_version }}-x86_64-unknown-linux-gnu"
        - name: Move fd binary into place
          copy:
            src: "/tmp/fd-{{ fd_version }}-x86_64-unknown-linux-gnu/fd"
            dest: "{{ bin_dir }}/fd"
            mode: '0755'
            remote_src: yes
        - name: Clean up fd archive
          file:
            path: "/tmp/fd-{{ fd_version }}-x86_64-unknown-linux-gnu"
            state: absent
      when: "ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'"

    - name: Install fzf
      block:
        - name: Download and unarchive fzf
          unarchive:
            src: "{{ fzf_url }}"
            dest: "{{ bin_dir }}"
            remote_src: yes
            mode: '0755'
            creates: "{{ bin_dir }}/fzf"
      when: "ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'"

    - name: Install zoxide from .deb
      block:
        - name: Download zoxide .deb package
          get_url:
            url: "{{ zoxide_deb_url }}"
            dest: "/tmp/zoxide.deb"
        - name: Install zoxide .deb package
          apt:
            deb: "/tmp/zoxide.deb"
        - name: Clean up zoxide .deb package
          file:
            path: "/tmp/zoxide.deb"
            state: absent
      when: "ansible_os_family == 'Debian'"

    - name: Install Neovim
      block:
        - name: Remove existing nvim binary if it is not a symlink
          file:
            path: "{{ bin_dir }}/nvim"
            state: absent
          when: "not (ansible_facts.files[bin_dir + '/nvim'] is defined and ansible_facts.files[bin_dir + '/nvim'].islink)"
        - name: Download and unarchive Neovim
          unarchive:
            src: "{{ neovim_url }}"
            dest: "/tmp"
            remote_src: yes
            creates: "/tmp/nvim-linux64"
        - name: Move Neovim directory into place
          copy:
            src: "/tmp/nvim-linux64/"
            dest: "/opt/nvim-linux64/"
            mode: '0755'
            remote_src: yes
        - name: Link nvim to bin directory
          file:
            src: "/opt/nvim-linux64/bin/nvim"
            dest: "{{ bin_dir }}/nvim"
            state: link
        - name: Clean up Neovim archive
          file:
            path: "/tmp/nvim-linux64"
            state: absent
      when: "ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'"

    - name: Set zsh as default shell for ansible user
      user:
        name: ansible
        shell: /usr/bin/zsh
      become: yes

    - name: Install Oh My Zsh
      shell: |
        RUNZSH=no CHSH=no KEEP_ZSHRC=yes sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      args:
        creates: /home/ansible/.oh-my-zsh
      become_user: ansible

    - name: Install Powerlevel10k theme
      git:
        repo: https://github.com/romkatv/powerlevel10k.git
        dest: /home/ansible/.oh-my-zsh/custom/themes/powerlevel10k
        depth: 1
      become_user: ansible

    - name: Install zsh plugins
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        depth: 1
      loop:
        - repo: https://github.com/zsh-users/zsh-autosuggestions
          dest: /home/ansible/.oh-my-zsh/custom/plugins/zsh-autosuggestions
        - repo: https://github.com/zsh-users/zsh-syntax-highlighting
          dest: /home/ansible/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
      become_user: ansible

    - name: Create directories for dotfiles
      file:
        path: "{{ item }}"
        state: directory
        owner: ansible
        group: ansible
        mode: '0755'
      loop:
        - /home/ansible/.local/bin
        - /home/ansible/.config/ghostty
      become_user: ansible

    - name: Link dotfiles
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
        owner: ansible
        group: ansible
        force: yes
      loop:
        - src: "{{ dotfiles_dir }}/bin/tmux-sessionizer"
          dest: /home/ansible/.local/bin/tmux-sessionizer
        - src: "{{ dotfiles_dir }}/config/ghostty/config"
          dest: /home/ansible/.config/ghostty/config
        - src: "{{ dotfiles_dir }}/tmux/tmux.conf"
          dest: /home/ansible/.tmux.conf
        - src: "{{ dotfiles_dir }}/zsh/zshrc"
          dest: /home/ansible/.zshrc
        - src: "{{ dotfiles_dir }}/zsh/functions.zsh"
          dest: /home/ansible/.zsh_functions
        - src: "{{ dotfiles_dir }}/nvim"
          dest: /home/ansible/.config/nvim
      become_user: ansible

    - name: Make tmux-sessionizer executable
      file:
        path: /home/ansible/.local/bin/tmux-sessionizer
        mode: '0755'
      become_user: ansible

    - name: Setup zshenv for PATH
      lineinfile:
        path: /home/ansible/.zshenv
        line: 'export PATH="$HOME/.local/bin:/usr/local/bin:$PATH"'
        create: yes
        owner: ansible
        group: ansible
      become_user: ansible

